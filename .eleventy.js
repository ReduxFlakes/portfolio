import markdownIt from "markdown-it";
import markdownItAnchor from "markdown-it-anchor";
import postcss from "postcss";
import postcssImport from "postcss-import";
import postcssCsso from "postcss-csso";
import htmlMin from "html-minifier-terser";
import { EleventyRenderPlugin } from "@11ty/eleventy";
import { DateTime } from "luxon";

export default function (config) {
  config.setServerOptions({
    watch: ["src/css/", "src/*/*.md/"],
  });
  config.addPassthroughCopy("src/static");
  /* set markdown-it */
  const md = markdownIt({ html: true });
  md.use(markdownItAnchor, {
    tabIndex: false,
  });

  config.setLibrary("markdown", md);
  /* collections */
  config.addCollection("blog", function (collectionApi) {
    return collectionApi.getFilteredByGlob("src/blog/posts/**/*.md");
  });
  /* filters */
  config.addFilter("postDate", function (date) {
    return DateTime.fromJSDate(date).toFormat("dd LLL yyyy");
  });
  config.addFilter("dateToISOString", function (date) {
    return new Date(date).toISOString();
  });
  /* shortcodes */
  /* a way to make slots work inside content pages: https://danburzo.ro/eleventy-slotted-content/*/
  const slots = {};
  config.addGlobalData("eleventyComputed.slots", function () {
    return (data) => {
      const key = data.page.inputPath;
      slots[key] = slots[key] || {};
      return slots[key];
    };
  });
  config.addPairedShortcode("slot", function (content, name) {
    if (!name) throw new Error("Missing name for {% slot %} block!");
    slots[this.page.inputPath][name] = content;
    return "";
  });
  /* configure postcss and html-minifier-terser 
  taken from this great article by pepelsbey (Vadim):
  https://pepelsbey.dev/articles/eleventy-css-js/
  */
  config.addTemplateFormats("css");
  config.addExtension("css", {
    outputFileExtension: "css",
    compile: async (content, path) => {
      if (path !== "./src/styles/index.css") {
        return;
      }
      return async () => {
        let output = await postcss([postcssImport, postcssCsso]).process(
          content,
          {
            from: path,
          }
        );
        return output.css;
      };
    },
  });
  config.addTransform("html-minify", (content, path) => {
    if (path && path.endsWith(".html")) {
      return htmlMin.minify(content, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
      });
    }
    return content;
  });
  /* plugins */
  config.addPlugin(EleventyRenderPlugin);
  return {
    markdownTemplateEngine: "njk",
    htmlTemplateEngine: "njk",
    dataTemplateEngine: "njk",
    passthroughFileCopy: true,
    dir: {
      input: "src",
      layouts: "_layouts",
      includes: "_includes",
      data: "_data",
      output: "_site",
    },
  };
}
